'use strict';

var express = require('express');
var bodyParser = require('body-parser');
var app = express();

// Serve assets in /public.
app.use(express.static(__dirname + '/public'));

// Allow POSTing JSON.
app.use(bodyParser.json());

// Root URL repsonds to HTTP GET, serves index.html file
app.get('/', function(req, res) {
  res.sendFile('index.html', {
    root: __dirname
  });
});

// Express Server listens on port 5000
app.listen(process.env.PORT || 5000);

// EDIT BELOW THIS LINE

// Just a sample data set. Feel free to use something else!
var mixmaxFeatures = [
  'code snippet',
  'availability',
  'table',
  'Email tracking',
  'Giphy',
  'PDF Slideshow',
  'Article',
  'SMS Me',
  'Secret Message',
  'Encryption',
  'Poll',
  'Public Poll',
  'Send Later',
  'Send Later with tracking',
  'Markdown',
  'Link Preview',
  'Yes/No',
  'Question and Answer',
  'Forms in Email',
  'Forms in pages',
  'Cloud hosted attachments',
  'Email templates',
  'Gists',
  'Google Maps integration'
];

/*  autocomplete function takes in a query and returns a list of data
 *  @param {String} query - User input as a string
 *  @returns {Array|Object} - Array like object that contains list of potential matches for query
 */
function autocomplete(query) {
  // Get a list of the different query words
  var queryWords = query.trim().toLowerCase().split(" ");
  var returnVals = [];
  console.log(queryWords);

  // Loop through all features and then the query words and find matches
  for (var i in mixmaxFeatures) {
    var allIn = true;
    var indices = [];
    for (var j in queryWords) {
      var index = mixmaxFeatures[i].toLowerCase().search(queryWords[j])
      if (!(index >= 0)) {
        allIn = false;
      }
      console.log(index);
      if (index > 0 && mixmaxFeatures[i].substring(index-1,index) !== " ") {
        allIn = false;
      } else {
        indices.push(index);
      }
    }
    console.log(indices);
    if (allIn) {
      for (var h =0; h < indices.length; h++) {
        if (indices.length == 1 || indices[h] < indices[h+1]) {
          returnVals.push(mixmaxFeatures[i]);
        }
      }
    }
  }

  return returnVals;
}

/*  API route for autocomplete. Responds to HTTP POST. Looks for param query in request body.
 *  @param {String} req.body.query - Data from client
 */
app.post('/query', function(req, res) {
  var query = req.body.query;
  res.json(autocomplete(query));
});
